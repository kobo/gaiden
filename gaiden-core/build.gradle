/*
 * Copyright 2014 the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

applicationName = 'gaiden'
mainClassName = 'gaiden.GaidenMain'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.17'
    compile 'org.apache.ant:ant:1.10.7'
    compile 'org.pegdown:pegdown:1.4.2'
    compile 'commons-io:commons-io:2.6'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-codec:commons-codec:1.13'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile('org.springframework:spring-context:5.2.0.RELEASE') {
        exclude(group: 'commons-logging', module: 'commons-logging')
    }
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.28'
    compile 'net.htmlparser.jericho:jericho-html:3.4'
    compile 'io.vertx:vertx-platform:2.1.6'
    compile 'io.vertx:lang-groovy:2.1.1-final'

    testCompile 'org.spockframework:spock-core:1.3-groovy-2.4'

    // optional dependencies for using Spock
    testRuntime 'cglib:cglib-nodep:3.3.0'       // enables mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:3.0.1' // enables mocking of without default constructor (together with CGLIB)
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('$GAIDEN_OPTS', '$GAIDEN_OPTS -Dapp.home=$APP_HOME')
        windowsScript.text = windowsScript.text.replace('%GAIDEN_OPTS%', '%GAIDEN_OPTS% "-Dapp.home=%APP_HOME%"')
    }
}

processResources {
    filter ReplaceTokens, tokens: [
        revision: repo.head().id,
        version: version,
        buildDate: new Date().format("yyyy-MM-dd HH:mm:ss.SSSZ"),
    ]
}
